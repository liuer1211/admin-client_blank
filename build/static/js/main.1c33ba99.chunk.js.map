{"version":3,"sources":["api/ajax.js","api/index.js","utils/memoryUtils.js","utils/storageUtils.js","pages/login/login.jsx","pages/admin/admin.jsx","App.js","index.js"],"names":["ajax","url","data","arguments","length","undefined","type","Promise","res","rej","axios","get","params","post","then","resp","catch","err","message","error","reqLogin","username","password","memoryUtils","user","storageUtils","saveUser","store","set","getUser","removeUser","remove","Item","es_form","Login","handleSubmit","e","preventDefault","_this","props","form","validateFields","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","values","result","wrap","_context","prev","next","create_time","role","menus","__v","_id","sent","status","success","console","log","history","replace","msg","t0","stop","_x","_x2","apply","this","validatePwd","rule","value","callBack","test","react_default","createElement","react_router","to","getFieldDecorator","className","onSubmit","rules","required","whitespace","min","max","pattern","input","prefix","icon","style","color","placeholder","validator","es_button","block","htmlType","Component","WrapLogin","create","Admin","App","react_router_dom","path","component","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.1c33ba99.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { message } from \"antd\";\r\n\r\nexport default function ajax(url,data={},type='GET'){\r\n\r\n    return new Promise((res,rej)=>{\r\n        let promise\r\n        if (type === 'GET') {\r\n            promise = axios.get(url, {\r\n                params: data\r\n            })\r\n        } else {\r\n            promise = axios.post(url, data)\r\n        }\r\n        promise.then(resp=>{\r\n            res(resp.data)\r\n        }).catch(err=>{\r\n            // 异常传出，可以在各自的方法上做为伪数据 - 这块方便演示查看\r\n            rej(err)\r\n            message.error(err.message)\r\n        })\r\n        \r\n    })\r\n    \r\n}","import ajax from \"./ajax\";\r\n\r\n// 每个接口返回都是promise\r\n\r\nconst BASE = ''\r\n\r\n// 登录\r\n// export function reqLogin(username, password){\r\n//     return ajax('/login', {username, password})\r\n// }\r\nexport const reqLogin = (username, password) => ajax(BASE + '/login', {username, password}, 'POST')\r\n\r\n// 添加用户\r\nexport const reqAddUser = (user) => ajax(BASE + '/manage/user/add', user, 'POST')","\r\nexport default {\r\n    user: {} // 保存当前登录的用户信息\r\n}","/*\r\n    localStorage 缓存方法\r\n*/\r\nimport store from \"store\";\r\n\r\nconst USER_KEY = 'user_key'\r\nexport default {\r\n    // 保存user\r\n    saveUser(user) {\r\n        // localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n        store.set(USER_KEY, user);\r\n    },\r\n    // 获取user\r\n    getUser() {\r\n        // return JSON.parse(localStorage.getItem(USER_KEY) || '{}');\r\n        return store.get(USER_KEY) || {};\r\n    },\r\n    // 移除user\r\n    removeUser() {\r\n        // localStorage.removeItem(USER_KEY);\r\n        store.remove(USER_KEY);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { Form, Icon, Input, Button, message } from 'antd';\r\n\r\nimport {reqLogin} from '../../api'\r\nimport memoryUtils from '../../utils/memoryUtils'\r\nimport storageUtils from '../../utils/storageUtils'\r\n\r\nimport './login.less'\r\n\r\nconst Item = Form.Item // 不能写到import前\r\n\r\nclass Login extends Component {\r\n  // 提交\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields(async (err, values) => {\r\n      // 校验成功\r\n      if (!err) {\r\n        const {username, password} = values\r\n\r\n        const data = {\r\n          create_time: 1626874402124,\r\n          password: \"21232f297a57a5a743894a0e4a801fc3\",\r\n          role: {menus: []},\r\n          menus: [],\r\n          username: \"admin\",\r\n          __v: 0,\r\n          _id: \"60f822221a00151314d2626a\"\r\n        }\r\n\r\n        try {\r\n          const result = await reqLogin(username, password)\r\n          if (result.status===0) {\r\n            message.success('登陆成功')\r\n\r\n            const user = result.data\r\n            // 存到内存里\r\n            memoryUtils.user = user\r\n            // 存到本地\r\n            storageUtils.saveUser(user)\r\n\r\n            console.log(user)\r\n\r\n            // 不需要回退到登录\r\n            // this.props.history.push('/')\r\n            this.props.history.replace('/')\r\n          } else {\r\n            message.error(result.msg)\r\n          }\r\n        } catch (e) {\r\n          // 获取伪数据\r\n          message.error('接口异常-使用伪数据')\r\n          // 存到内存里\r\n          memoryUtils.user = data\r\n          // 存到本地\r\n          storageUtils.saveUser(data)\r\n          // 跳转\r\n          this.props.history.replace('/')\r\n        }\r\n\r\n      } else {\r\n        console.log('校验失败')\r\n      }\r\n    });\r\n    // // form对象\r\n    // const form = this.props.form\r\n    // // 获取表单数据\r\n    // const values = form.getFieldsValue()\r\n    // const val = form.getFieldValue()\r\n    // console.log(form)\r\n    // console.log(values)\r\n    // console.log(val)\r\n  };\r\n\r\n  // 校验,其他写法\r\n  validatePwd = (rule, value, callBack)=> {\r\n    if (!value) {\r\n      callBack('密码必输')\r\n    } else if (value.length<4) {\r\n      callBack('密码大于4位')\r\n    } else if (value.length>12) {\r\n      callBack('密码小于12位')\r\n    } else if (!(/^[a-zA-Z0-9_]+$/.test(value))) {\r\n      callBack('必须数字英文下划线')\r\n    } else{\r\n      callBack()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // 如果用户登录，跳转到首页\r\n    const user = memoryUtils.user\r\n    // 当前没有用户\r\n    if (user && user._id) {\r\n      // 自动跳转登录\r\n      return <Redirect to='/'/>\r\n    }\r\n\r\n    // 得到具有强大功能的from对象\r\n    const form = this.props.form\r\n    const {getFieldDecorator} = form\r\n\r\n    return (\r\n      // 主体\r\n      <div className=\"login-main\">\r\n        <div className=\"login-model\">\r\n          <div className=\"login-tit\">用户登录</div>\r\n          <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n            <Item>\r\n              {\r\n                getFieldDecorator('username', {\r\n                  rules: [\r\n                    { required: true, whitespace: true, message: '用户名必输' },\r\n                    { min: 4, message: '最小4位' },\r\n                    { max: 12, message: '最大12位' },\r\n                    { pattern: /^[a-zA-Z0-9_]+$/, message: '必须数字英文下划线' },\r\n                  ],\r\n                })(\r\n                  <Input\r\n                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                    placeholder=\"Username\"\r\n                  />\r\n                )\r\n              }\r\n            </Item>\r\n            <Item>\r\n              {\r\n                  getFieldDecorator('password', {\r\n                    rules: [\r\n                      { validator: this.validatePwd }\r\n                    ],\r\n                  })(\r\n                    <Input\r\n                      prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                      type=\"password\"\r\n                      placeholder=\"Password\"\r\n                    />\r\n                  )\r\n                }\r\n            </Item>\r\n            <Item>\r\n              <Button type=\"primary\" block htmlType=\"submit\" className=\"login-form-button\">\r\n                登录\r\n              </Button>\r\n            </Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/*\r\n  1. 高阶函数\r\n    1). 一类特定的函数\r\n      a. 接收函数类型的参数\r\n      b. 返回值是函数\r\n    2). 常见\r\n      a. 定时器：setTimeout()/setInterval()\r\n      b. Promise: Promise(()={}) then(value=>{},reason=>{})\r\n      c. 数组遍历相关的方法： forEach()/filter()/map()/reduce()/find()/findIndex()\r\n      d. 函数对象的bind()\r\n      e. Form.create()() / getFieldDecorator()()\r\n    3). 高阶函数更新动态，更加具有扩展性\r\n  2. 高阶组件\r\n    1). 本质就是一个函数\r\n    2). 接收一个组件（被包装组件），返回一个新的组件（包装组建），包装组建会向被包装组件传入特定属性\r\n    3). 作用：扩展组件的功能\r\n    4). 高阶组件也是一个高阶函数：接受一个组件函数，返回一个新的组件函数\r\n      \r\n*/\r\n\r\n/*\r\n  登录的路由组件\r\n  包装Form组件生成一个新的组件：Form（Login）\r\n  新组件会向Form组件传递一个强大的对象属性：form\r\n*/\r\nconst WrapLogin = Form.create()(Login)\r\nexport default WrapLogin\r\n\r\n// 前台表单验证\r\n// 手机表单输入数据","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router';\r\n\r\nimport memoryUtils from '../../utils/memoryUtils';\r\n\r\nexport default class Admin extends Component {\r\n  render() {\r\n    const user = memoryUtils.user\r\n    // 当前没有用户\r\n    if (!user || !user._id) {\r\n      // 自动跳转登录\r\n      return <Redirect to='/login'/>\r\n    }\r\n    return (\r\n      <div>\r\n        {user.username}\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\n\nimport Login from './pages/login/login'\nimport Admin from './pages/admin/admin'\n\n/*\n  应用的根组件\n*/\n\nexport default class App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        {/* 只匹配其中一个 */}\n        <Switch>\n          <Route path='/Login' component={Login}></Route>\n          <Route path='/' component={Admin}></Route>\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport storageUtils from './utils/storageUtils'\nimport memoryUtils from './utils/memoryUtils'\n\n// 读取local保存的user,保存到内存里\nconst user = storageUtils.getUser()\nmemoryUtils.user = user\n\n// 将App组件标签 渲染到index页面的div上\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}